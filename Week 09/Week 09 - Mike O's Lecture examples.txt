******************************************************
COIT11134 Object Oriented Programming (2022-T2)
Week: 09
Course WEB Page (Moodle):         https://moodle.cqu.edu.au/course/view.php?id=37696
Course Coordinator:               Salahuddin Azad, Melbourne Campus, Email: s.azad@cqu.edu.au, Phone: +61-03-9616-0680
Rocky Teacher (Part-Time):        Mike O'Malley, m.omalley@cqu.edu.au
Mike O's GitHub for course/term:  https://github.com/MooseValley/uni-COIT11134-Object-Oriented-Programming-2022-T2
Mike O'Malley's Java Videos (incl JavaFX, etc):            http://tinyurl.com/MikesJavaVideos
Mike O'Malley's JavaFX + Netbeans + Scene Builder Videos:  http://tinyurl.com/MikesJavaFXVideos
******************************************************

ROAD MAP:
Week 1 - Revision of Java, Classes, Objects.
Week 2 - Inheritance
Week 3 - Polymorphism
Week 4 - GUI and Event Handling Part A
Week 5 - GUI and Event Handling Part B.  Next week: mid-term break
Week 6 - Introduction to Git and Version Control
Week 7 - Java Exception Handling, and Revisit Files IO
Week 8 - Interfaces and Inner Classes
Week 9 - Generic Methods    <--- YOU ARE HERE !
Week 10 - Generic Classes
Week 11 - Linked Lists, Files and Algorithms
Week 12 - Stacks, Queues and Trees



LAST WEEK: Week 08
* Week 8 - Interfaces and Inner Classes

THIS WEEK: Week 09
* Week 9 - Generic Methods    <--- YOU ARE HERE !


Week 12 Public Holiday - Monday 3 October (Week 12) is a public holiday


----------------------------------------------------
*** Wrapper Classes: Auto-Boxing, Auto-Unboxing, etc
----------------------------------------------------

Lots of data structure / storage classes build into Java - ArrayList, LinkedList, Stack, Queue, Tree, etc
can only store Reference types: String, Date, and any data classes you create: Employee, Person, Product, ..
You CANNOT store primitive types: int, double, long, char, boolean, .......
because these structures only work for Reference Types.

Wrapper Classes are Reference Type version of Primitive Types
int     -> Integer
double  -> Double
boolean -> Boolean
char    -> Character
::::

We have used them:
    Integer.parseInt (....);
    Double.parseDouble (...);
but we haven't discussed them at all in any depth.

Auto-Boxing, Auto-Unboxing

int k = 9;
Integer m = k;  // OK
Integer m = k + 9 * 20;  // OK

You don't have to typecast:
Integer m = (Integer) k;  // OK

k = m + 30; // OK - no need to typecast.



EOF.
